# Generated by Django 4.1.7 on 2023-03-03 20:00

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('phone_number', models.CharField(blank=True, max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('email', models.EmailField(max_length=60, unique=True, verbose_name='email')),
                ('username', models.CharField(max_length=30, unique=True)),
                ('profile_picture', models.ImageField(blank=True, upload_to='')),
                ('category', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Independent'), (2, 'Organization')], null=True)),
                ('verification_code', models.IntegerField(blank=True, null=True)),
                ('website', models.CharField(blank=True, max_length=100, null=True)),
                ('social_media_link', models.CharField(blank=True, max_length=100, null=True)),
                ('location', models.CharField(blank=True, max_length=100, null=True)),
                ('weekday_from', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Monday'), (2, 'Tuesday'), (3, 'Wednesday'), (4, 'Thursday'), (5, 'Friday'), (6, 'Saturday'), (7, 'Sunday')], null=True)),
                ('weekday_to', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Monday'), (2, 'Tuesday'), (3, 'Wednesday'), (4, 'Thursday'), (5, 'Friday'), (6, 'Saturday'), (7, 'Sunday')], null=True)),
                ('from_hour', models.TimeField(null=True)),
                ('to_hour', models.TimeField(null=True)),
                ('long', models.DecimalField(decimal_places=6, max_digits=9, null=True)),
                ('lat', models.DecimalField(decimal_places=6, max_digits=9, null=True)),
                ('description', models.CharField(blank=True, max_length=400, null=True)),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('last_login', models.DateTimeField(auto_now=True, verbose_name='last login')),
                ('is_admin', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('hide_email', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Request',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_id', models.CharField(blank=True, max_length=100)),
                ('client_name', models.CharField(blank=True, max_length=100)),
                ('client_profile_picture', models.CharField(blank=True, max_length=100, null=True)),
                ('description', models.CharField(blank=True, max_length=200)),
                ('phone_number', models.CharField(blank=True, max_length=100)),
                ('service_id', models.CharField(blank=True, max_length=200)),
                ('service_title', models.CharField(blank=True, max_length=200)),
            ],
            options={
                'verbose_name_plural': 'Requests',
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('concert_id', models.CharField(blank=True, max_length=100)),
                ('title', models.CharField(blank=True, max_length=200)),
                ('concert_picture', models.CharField(blank=True, max_length=100, null=True)),
                ('assignee_id', models.CharField(blank=True, max_length=200)),
                ('assignee_email', models.CharField(blank=True, max_length=200)),
                ('assignee_picture', models.CharField(blank=True, max_length=200)),
                ('assignee_name', models.CharField(blank=True, max_length=200)),
                ('status', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'Generate'), (2, 'In Progress'), (3, 'In Review'), (4, 'Done')], null=True)),
                ('ticket_number', models.IntegerField(blank=True, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=17)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
            ],
            options={
                'verbose_name_plural': 'Tickets',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.CharField(blank=True, max_length=400, null=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('long', models.DecimalField(decimal_places=6, max_digits=9)),
                ('lat', models.DecimalField(decimal_places=6, max_digits=9)),
                ('permit', models.FileField(blank=True, null=True, upload_to='certificates/')),
                ('web_link', models.CharField(blank=True, max_length=200, null=True)),
                ('traffic', models.IntegerField(blank=True, default=0)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Services',
            },
        ),
        migrations.CreateModel(
            name='Concert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('concert_picture', models.ImageField(blank=True, upload_to='')),
                ('event_date', models.CharField(max_length=50)),
                ('from_hour', models.TimeField()),
                ('to_hour', models.TimeField()),
                ('location', models.CharField(blank=True, max_length=100, null=True)),
                ('long', models.DecimalField(decimal_places=6, max_digits=9)),
                ('lat', models.DecimalField(decimal_places=6, max_digits=9)),
                ('description', models.CharField(blank=True, max_length=400, null=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('web_link', models.CharField(blank=True, max_length=100, null=True)),
                ('traffic', models.IntegerField(blank=True, default=0)),
                ('tickets', models.IntegerField(blank=True, default=0)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Concerts',
            },
        ),
    ]
